/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param name The name of the event.
 * @param id Unique identifier of the event
 * @param longitude Longitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.
 * @param latitude Latitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others.
 * @param depth Depth in Km | double
 * @param occuringTime Origin time | datetime(3)
 * @param magnitude Magnitude | double
 * @param magType Type of the magnitude | varchar(255)
 * @param boundingBox The bounding box of the event. The order of the coordinates is: South, West, North, East.
 * @param products The list of the id of the available products for the event.
 * @param idIngv Unique incremental id | bigint(20)
 * @param focalPlane The number of focal planes available for the event. 0: both FP1 and FP2 available, 1: only FP1 available, 2: only FP2 available
 */


data class CatalogEventIdEventDetailsJsonGet200Response (

    /* The name of the event. */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Unique identifier of the event */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Longitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others. */
    @Json(name = "longitude")
    val longitude: kotlin.Double? = null,

    /* Latitude of a point expressed in:  * the ETRS89 system for Italian and European territories * and in WGS84 for the others. */
    @Json(name = "latitude")
    val latitude: kotlin.Double? = null,

    /* Depth in Km | double */
    @Json(name = "depth")
    val depth: kotlin.Double? = null,

    /* Origin time | datetime(3) */
    @Json(name = "occuring_time")
    val occuringTime: java.time.OffsetDateTime? = null,

    /* Magnitude | double */
    @Json(name = "magnitude")
    val magnitude: kotlin.Double? = null,

    /* Type of the magnitude | varchar(255) */
    @Json(name = "mag_type")
    val magType: kotlin.String? = null,

    /* The bounding box of the event. The order of the coordinates is: South, West, North, East. */
    @Json(name = "bounding_box")
    val boundingBox: kotlin.collections.List<kotlin.String>? = null,

    /* The list of the id of the available products for the event. */
    @Json(name = "products")
    val products: kotlin.collections.List<kotlin.String>? = null,

    /* Unique incremental id | bigint(20) */
    @Json(name = "id_ingv")
    val idIngv: kotlin.Long? = null,

    /* The number of focal planes available for the event. 0: both FP1 and FP2 available, 1: only FP1 available, 2: only FP2 available */
    @Json(name = "focal_plane")
    val focalPlane: kotlin.Int? = null

)

